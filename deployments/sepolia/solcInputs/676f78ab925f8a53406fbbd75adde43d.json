{
  "language": "Solidity",
  "sources": {
    "contracts/upgradableSmartContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// freeContract\ncontract implementation_contract {\n    address admin;\n    mapping(address => uint256) public usersBalance;\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function setBalance(uint _value) public {\n        usersBalance[msg.sender] += _value;\n    }\n\n    function viewAdmin() public view returns (address) {\n        return admin;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return \"implementation_contract\";\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return \"impl\";\n    }\n}\n\n// contract proxyToken\ncontract proxyContract {\n    address public admin;\n    mapping(address => uint256) public usersBalance;\n    address public implContract;\n\n    constructor(address _implContract) {\n        require(_implContract != address(0), \"INVALID IMPLEMENTATION ADDRESS\");\n        admin = msg.sender;\n        implContract = _implContract;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == admin, \"NOT A VAID CALLER\");\n        _;\n    }\n\n    function setBalance(uint256 _value) public {\n        (bool success, ) = implContract.delegatecall(\n            abi.encodeWithSignature(\"setBalance(uint256)\", _value)\n        );\n        require(success, \"FUNCTION CALL FAILED\");\n    }\n\n    function upgradeContract(address _newImpl) external onlyOwner {\n        require(_newImpl != address(0), \"INVALID ADDRESS\");\n        implContract = _newImpl;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return \"proxyContract\";\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return \"PC\";\n    }\n}\n\n// contract paidContract\ncontract upgraded_implementation_contract {\n    address public admin;\n    mapping(address => uint256) public usersBalance;\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function setBalance(uint _value) public {\n        uint ninetyPercent = (_value * 90) / 100;\n        usersBalance[msg.sender] += ninetyPercent;\n        usersBalance[admin] += _value - ninetyPercent;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return \"upgraded_implementation_contract\";\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return \"uImpl\";\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}